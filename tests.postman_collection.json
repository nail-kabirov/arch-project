{
	"info": {
		"_postman_id": "fa5202c8-ba24-451c-819d-7782d68c5f0b",
		"name": "Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register Users And Init Accounts",
			"item": [
				{
					"name": "User 1",
					"item": [
						{
							"name": "register user 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login1\", pm.variables.replaceIn('{{$randomUserName}}'))",
											"pm.collectionVariables.set(\"password1\", pm.variables.replaceIn('{{$randomPassword}}'))",
											"",
											"pm.collectionVariables.set(\"firstName1\", pm.variables.replaceIn('{{$randomFirstName}}'))",
											"pm.collectionVariables.set(\"lastName1\", pm.variables.replaceIn('{{$randomLastName}}'))",
											"pm.collectionVariables.set(\"email1\", pm.variables.replaceIn('{{$randomEmail}}'))",
											"pm.collectionVariables.set(\"address1\", pm.variables.replaceIn('{{$randomCity}}, {{$randomStreetAddress}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"userId1\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\",\n     \"firstName\": \"{{firstName1}}\",\n    \"lastName\": \"{{lastName1}}\",\n    \"email\": \"{{email1}}\",\n    \"address\": \"{{address1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"23db782a-8a54-4728-6567-0b03ba35ff99\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User Profile 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"login\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"firstName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"lastName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"email\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"login\", \"firstName\", \"lastName\", \"email\", \"address\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test('Initial profile data valid', function() {",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"id\"]).to.eql(pm.collectionVariables.get(\"userId1\"))",
											"    pm.expect(responseJSON[\"login\"]).to.eql(pm.collectionVariables.get(\"login1\"))",
											"    pm.expect(responseJSON[\"firstName\"]).to.eql(pm.collectionVariables.get(\"firstName1\"))",
											"    pm.expect(responseJSON[\"lastName\"]).to.eql(pm.collectionVariables.get(\"lastName1\"))",
											"    pm.expect(responseJSON[\"email\"]).to.eql(pm.collectionVariables.get(\"email1\"))",
											"    pm.expect(responseJSON[\"address\"]).to.eql(pm.collectionVariables.get(\"address1\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/user/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"user",
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "user response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d6e50eb2-c610-8777-b66c-b74437ea1243\",\n \"login\": \"Duis dolor commodo\",\n \"firstName\": \"non in mollit\",\n \"lastName\": \"sed ut dolor\",\n \"email\": \"4FRCPZb1iK@qlnLeZJPJw.mw\",\n \"address\": \"consequat nulla\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "top up an account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to be sure billing account created",
											"setTimeout(function() {}, 500);",
											"",
											"pm.collectionVariables.set(\"accountAmount1\", pm.variables.replaceIn('2000'))",
											"pm.collectionVariables.set(\"accountBlockedAmount1\", pm.variables.replaceIn('0'))",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{accountAmount1}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "account status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount1\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount1\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User 2",
					"item": [
						{
							"name": "register user 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login2\", pm.variables.replaceIn('{{$randomUserName}}'))",
											"pm.collectionVariables.set(\"password2\", pm.variables.replaceIn('{{$randomPassword}}'))",
											"",
											"pm.collectionVariables.set(\"firstName2\", pm.variables.replaceIn('{{$randomFirstName}}'))",
											"pm.collectionVariables.set(\"lastName2\", pm.variables.replaceIn('{{$randomLastName}}'))",
											"pm.collectionVariables.set(\"email2\", pm.variables.replaceIn('{{$randomEmail}}'))",
											"pm.collectionVariables.set(\"address2\", pm.variables.replaceIn('{{$randomCity}}, {{$randomStreetAddress}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"userId2\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\",\n     \"firstName\": \"{{firstName2}}\",\n    \"lastName\": \"{{lastName2}}\",\n    \"email\": \"{{email2}}\",\n    \"address\": \"{{address2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"23db782a-8a54-4728-6567-0b03ba35ff99\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User Profile 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"login\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"firstName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"lastName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"email\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"login\", \"firstName\", \"lastName\", \"email\", \"address\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test('Initial profile data valid', function() {",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"id\"]).to.eql(pm.collectionVariables.get(\"userId2\"))",
											"    pm.expect(responseJSON[\"login\"]).to.eql(pm.collectionVariables.get(\"login2\"))",
											"    pm.expect(responseJSON[\"firstName\"]).to.eql(pm.collectionVariables.get(\"firstName2\"))",
											"    pm.expect(responseJSON[\"lastName\"]).to.eql(pm.collectionVariables.get(\"lastName2\"))",
											"    pm.expect(responseJSON[\"email\"]).to.eql(pm.collectionVariables.get(\"email2\"))",
											"    pm.expect(responseJSON[\"address\"]).to.eql(pm.collectionVariables.get(\"address2\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/user/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"user",
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "user response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d6e50eb2-c610-8777-b66c-b74437ea1243\",\n \"login\": \"Duis dolor commodo\",\n \"firstName\": \"non in mollit\",\n \"lastName\": \"sed ut dolor\",\n \"email\": \"4FRCPZb1iK@qlnLeZJPJw.mw\",\n \"address\": \"consequat nulla\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "top up an account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to be sure billing account created",
											"setTimeout(function() {}, 500);",
											"",
											"pm.collectionVariables.set(\"accountAmount2\", pm.variables.replaceIn('3000'))",
											"pm.collectionVariables.set(\"accountBlockedAmount2\", pm.variables.replaceIn('0'))",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{accountAmount2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "account status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount2\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User 3",
					"item": [
						{
							"name": "register user 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"login3\", pm.variables.replaceIn('{{$randomUserName}}'))",
											"pm.collectionVariables.set(\"password3\", pm.variables.replaceIn('{{$randomPassword}}'))",
											"",
											"pm.collectionVariables.set(\"firstName3\", pm.variables.replaceIn('{{$randomFirstName}}'))",
											"pm.collectionVariables.set(\"lastName3\", pm.variables.replaceIn('{{$randomLastName}}'))",
											"pm.collectionVariables.set(\"email3\", pm.variables.replaceIn('{{$randomEmail}}'))",
											"pm.collectionVariables.set(\"address3\", pm.variables.replaceIn('{{$randomCity}}, {{$randomStreetAddress}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"userId3\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\",\n     \"firstName\": \"{{firstName3}}\",\n    \"lastName\": \"{{lastName3}}\",\n    \"email\": \"{{email3}}\",\n    \"address\": \"{{address3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"23db782a-8a54-4728-6567-0b03ba35ff99\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"culpa dolore aute Ut\",\n    \"password\": \"Duis occaecat incididunt laboris\",\n    \"firstName\": \"in ullamco\",\n    \"lastName\": \"irure labore id enim\",\n    \"email\": \"57g1XDhEV412xxY@gqytacZAyRSGTRBytbWRQvcvp.nln\",\n    \"address\": \"veniam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"register"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User Profile 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"login\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"firstName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"lastName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"email\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"address\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"login\", \"firstName\", \"lastName\", \"email\", \"address\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test('Initial profile data valid', function() {",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"id\"]).to.eql(pm.collectionVariables.get(\"userId3\"))",
											"    pm.expect(responseJSON[\"login\"]).to.eql(pm.collectionVariables.get(\"login3\"))",
											"    pm.expect(responseJSON[\"firstName\"]).to.eql(pm.collectionVariables.get(\"firstName3\"))",
											"    pm.expect(responseJSON[\"lastName\"]).to.eql(pm.collectionVariables.get(\"lastName3\"))",
											"    pm.expect(responseJSON[\"email\"]).to.eql(pm.collectionVariables.get(\"email3\"))",
											"    pm.expect(responseJSON[\"address\"]).to.eql(pm.collectionVariables.get(\"address3\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/api/v1/user/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"api",
										"v1",
										"user",
										"profile"
									]
								}
							},
							"response": [
								{
									"name": "user response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d6e50eb2-c610-8777-b66c-b74437ea1243\",\n \"login\": \"Duis dolor commodo\",\n \"firstName\": \"non in mollit\",\n \"lastName\": \"sed ut dolor\",\n \"email\": \"4FRCPZb1iK@qlnLeZJPJw.mw\",\n \"address\": \"consequat nulla\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"profile"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -59499916,\n \"message\": \"qui cupidatat aliquip\"\n}"
								}
							]
						},
						{
							"name": "top up an account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to be sure billing account created",
											"setTimeout(function() {}, 500);",
											"",
											"pm.collectionVariables.set(\"accountAmount3\", pm.variables.replaceIn('4000'))",
											"pm.collectionVariables.set(\"accountBlockedAmount3\", pm.variables.replaceIn('0'))",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{accountAmount3}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:45cfd9e0-e642-0a47-a7ad-63adc905cb8a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 89883748.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "account status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Lots",
			"item": [
				{
					"name": "Initial lots",
					"item": [
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "information about initial lots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Initially should not be any new lots\", function() {",
											"    pm.expect(responseJSON).to.eql([]);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const curTime = new Date()",
											"pm.collectionVariables.set(\"initialTime\", pm.variables.replaceIn(curTime.toISOString()))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation",
											"disabled": true
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Invalid lots",
					"item": [
						{
							"name": "try create lot with endTime in past",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// current time",
											"const dt = new Date()",
											"",
											"pm.collectionVariables.set(\"lotDescription\", pm.variables.replaceIn('{{$randomProductName}}'))",
											"pm.collectionVariables.set(\"lotEndTime\", pm.variables.replaceIn(dt.toISOString()))",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{lotDescription}}\",\n    \"endTime\": \"{{lotEndTime}}\",\n    \"startPrice\": 1000,\n    \"buyItNowPrice\": 2000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d469a26f-9e55-422d-70de-7cfcf686348f\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "try create lot with buyItNowPrice less than startPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// current time",
											"const dt = new Date()",
											"// lot duration 1 day",
											"dt.setDate(dt.getDate() + 1)",
											"",
											"pm.collectionVariables.set(\"lotDescription\", pm.variables.replaceIn('{{$randomProductName}}'))",
											"pm.collectionVariables.set(\"lotEndTime\", pm.variables.replaceIn(dt.toISOString()))",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{lotDescription}}\",\n    \"endTime\": \"{{lotEndTime}}\",\n    \"startPrice\": 1000,\n    \"buyItNowPrice\": 999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d469a26f-9e55-422d-70de-7cfcf686348f\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Create User 1 lots",
					"item": [
						{
							"name": "create Lot1 by User1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const dt = new Date()",
											"// lot duration 1 day",
											"dt.setDate(dt.getDate() + 1)",
											"",
											"pm.collectionVariables.set(\"lotDescription\", pm.variables.replaceIn('{{$randomProductName}}'))",
											"pm.collectionVariables.set(\"lotEndTime\", pm.variables.replaceIn(dt.toISOString()))",
											"pm.collectionVariables.set(\"lot1StartPrice\", pm.variables.replaceIn('900'))",
											"pm.collectionVariables.set(\"lot1BuyItNowPrice\", pm.variables.replaceIn('2100'))",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"lotId1\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{lotDescription}}\",\n    \"endTime\": \"{{lotEndTime}}\",\n    \"startPrice\": {{lot1StartPrice}},\n    \"buyItNowPrice\": {{lot1BuyItNowPrice}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d469a26f-9e55-422d-70de-7cfcf686348f\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "create Lot2 by User1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const dt = new Date()",
											"// lot duration 1 day",
											"dt.setDate(dt.getDate() + 1)",
											"",
											"pm.collectionVariables.set(\"lotDescription\", pm.variables.replaceIn('{{$randomProductName}}'))",
											"pm.collectionVariables.set(\"lotEndTime\", pm.variables.replaceIn(dt.toISOString()))",
											"pm.collectionVariables.set(\"lot2StartPrice\", pm.variables.replaceIn('1300'))",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"lotId2\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{lotDescription}}\",\n    \"endTime\": \"{{lotEndTime}}\",\n    \"startPrice\": {{lot2StartPrice}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d469a26f-9e55-422d-70de-7cfcf686348f\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "no available lots for User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Should not be any new available lots for User 1\", function() {",
											"    pm.expect(responseJSON).to.eql([]);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation",
											"disabled": true
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "two lots created by User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"bids\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"userId\",",
											"                        \"userLogin\",",
											"                        \"amount\",",
											"                        \"creationDate\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"userId\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"uuid\"",
											"                        },",
											"                        \"userLogin\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"amount\": {",
											"                            \"type\": \"number\",",
											"                            \"multipleOf\": 0.01,",
											"                            \"minimum\": 0.01",
											"                        },",
											"                        \"creationDate\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"date-time\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"creationDate\",",
											"            \"bids\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Two lots created by User 1\", function() {",
											"    pm.expect(responseJSON.length).to.eql(2);",
											"    var lot1 = responseJSON[0];",
											"    pm.expect(lot1[\"id\"]).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"    pm.expect(lot1[\"startPrice\"]).to.eql(parseFloat(pm.collectionVariables.get(\"lot1StartPrice\")));",
											"    pm.expect(lot1[\"buyItNowPrice\"]).to.eql(parseFloat(pm.collectionVariables.get(\"lot1BuyItNowPrice\")));",
											"",
											"    var lot2 = responseJSON[1];",
											"    pm.expect(lot2[\"id\"]).to.eql(pm.collectionVariables.get(\"lotId2\"));",
											"    pm.expect(lot2[\"startPrice\"]).to.eql(parseFloat(pm.collectionVariables.get(\"lot2StartPrice\")));",
											"    pm.expect(lot2[\"buyItNowPrice\"]).not.to.exist",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots/my",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots",
										"my"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"887fd791-1034-b167-5dd7-012c6171f375\",\n  \"description\": \"Duis sunt elit\",\n  \"endTime\": \"1979-10-19T06:02:35.772Z\",\n  \"startPrice\": 42598555.14,\n  \"status\": \"active\",\n  \"creationDate\": \"2016-02-21T12:26:47.262Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:e3b2bd6b-85c3-d862-0644-f1be7996d622\",\n    \"userLogin\": \"proident voluptate sed adipisicing\",\n    \"amount\": 96243935.04,\n    \"creationDate\": \"1949-12-29T01:39:20.892Z\"\n   },\n   {\n    \"userId\": \"urn:uuid:fb8c64e4-3ce6-ada8-f6ab-f18d1c7e980f\",\n    \"userLogin\": \"consequat deserunt ut enim\",\n    \"amount\": 86613365.78,\n    \"creationDate\": \"1965-10-29T21:37:12.707Z\"\n   }\n  ],\n  \"buyItNowPrice\": 37081279.07\n },\n {\n  \"id\": \"urn:uuid:f2ec8dab-55f2-b2f1-0b04-760a00a79ef1\",\n  \"description\": \"\",\n  \"endTime\": \"1955-11-05T01:31:35.462Z\",\n  \"startPrice\": 15152127.540000001,\n  \"status\": \"sent\",\n  \"creationDate\": \"1997-08-22T06:02:22.327Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:9578dc5c-aadf-fb99-170b-6cbb79ccee6d\",\n    \"userLogin\": \"est amet ex\",\n    \"amount\": 14760048.370000001,\n    \"creationDate\": \"1949-05-04T19:49:52.260Z\"\n   },\n   {\n    \"userId\": \"4a40d427-b3b5-1cad-100d-8f4096bf15be\",\n    \"userLogin\": \"eu do magna dolor\",\n    \"amount\": 89270553.33,\n    \"creationDate\": \"1964-01-05T10:51:03.691Z\"\n   }\n  ],\n  \"buyItNowPrice\": 57479580.9\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Create User 2 lot",
					"item": [
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "create Lot3 by User2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const dt = new Date()",
											"// lot duration 1 day",
											"dt.setDate(dt.getDate() + 1)",
											"",
											"pm.collectionVariables.set(\"lotDescription\", pm.variables.replaceIn('{{$randomProductName}}'))",
											"pm.collectionVariables.set(\"lotEndTime\", pm.variables.replaceIn(dt.toISOString()))",
											"pm.collectionVariables.set(\"lot3StartPrice\", pm.variables.replaceIn('400'))",
											"pm.collectionVariables.set(\"lot3BuyItNowPrice\", pm.variables.replaceIn('800'))",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\"",
											"        }",
											"    },",
											"    \"required\": [\"id\"]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.collectionVariables.set(\"lotId3\", responseJSON[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{lotDescription}}\",\n    \"endTime\": \"{{lotEndTime}}\",\n    \"startPrice\": {{lot3StartPrice}},\n    \"buyItNowPrice\": {{lot3BuyItNowPrice}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:d469a26f-9e55-422d-70de-7cfcf686348f\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Duis est\",\n    \"endTime\": \"1983-09-26T11:31:04.111Z\",\n    \"startPrice\": 74109393.15,\n    \"buyItNowPrice\": 98945775.57000001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "two lots by User 1 available for User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Two lots available for User 2\", function() {",
											"    pm.expect(responseJSON.length).to.eql(2);",
											"    var ids = [responseJSON[0][\"id\"], responseJSON[1][\"id\"]];",
											"    expectedIds = [pm.collectionVariables.get(\"lotId1\"), pm.collectionVariables.get(\"lotId2\")];",
											"    ids.sort();",
											"    expectedIds.sort();",
											"    pm.expect(ids).to.eql(expectedIds);    ",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation",
											"disabled": true
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "one lot created by User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"bids\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"userId\",",
											"                        \"userLogin\",",
											"                        \"amount\",",
											"                        \"creationDate\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"userId\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"uuid\"",
											"                        },",
											"                        \"userLogin\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"amount\": {",
											"                            \"type\": \"number\",",
											"                            \"multipleOf\": 0.01,",
											"                            \"minimum\": 0.01",
											"                        },",
											"                        \"creationDate\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"date-time\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"creationDate\",",
											"            \"bids\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"One lot created by User 2\", function() {",
											"    pm.expect(responseJSON.length).to.eql(1);",
											"    var lot = responseJSON[0];",
											"    pm.expect(lot[\"id\"]).to.eql(pm.collectionVariables.get(\"lotId3\"));",
											"    pm.expect(lot[\"startPrice\"]).to.eql(parseFloat(pm.collectionVariables.get(\"lot3StartPrice\")));",
											"    pm.expect(lot[\"buyItNowPrice\"]).to.eql(parseFloat(pm.collectionVariables.get(\"lot3BuyItNowPrice\")));",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots/my",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots",
										"my"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"887fd791-1034-b167-5dd7-012c6171f375\",\n  \"description\": \"Duis sunt elit\",\n  \"endTime\": \"1979-10-19T06:02:35.772Z\",\n  \"startPrice\": 42598555.14,\n  \"status\": \"active\",\n  \"creationDate\": \"2016-02-21T12:26:47.262Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:e3b2bd6b-85c3-d862-0644-f1be7996d622\",\n    \"userLogin\": \"proident voluptate sed adipisicing\",\n    \"amount\": 96243935.04,\n    \"creationDate\": \"1949-12-29T01:39:20.892Z\"\n   },\n   {\n    \"userId\": \"urn:uuid:fb8c64e4-3ce6-ada8-f6ab-f18d1c7e980f\",\n    \"userLogin\": \"consequat deserunt ut enim\",\n    \"amount\": 86613365.78,\n    \"creationDate\": \"1965-10-29T21:37:12.707Z\"\n   }\n  ],\n  \"buyItNowPrice\": 37081279.07\n },\n {\n  \"id\": \"urn:uuid:f2ec8dab-55f2-b2f1-0b04-760a00a79ef1\",\n  \"description\": \"\",\n  \"endTime\": \"1955-11-05T01:31:35.462Z\",\n  \"startPrice\": 15152127.540000001,\n  \"status\": \"sent\",\n  \"creationDate\": \"1997-08-22T06:02:22.327Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:9578dc5c-aadf-fb99-170b-6cbb79ccee6d\",\n    \"userLogin\": \"est amet ex\",\n    \"amount\": 14760048.370000001,\n    \"creationDate\": \"1949-05-04T19:49:52.260Z\"\n   },\n   {\n    \"userId\": \"4a40d427-b3b5-1cad-100d-8f4096bf15be\",\n    \"userLogin\": \"eu do magna dolor\",\n    \"amount\": 89270553.33,\n    \"creationDate\": \"1964-01-05T10:51:03.691Z\"\n   }\n  ],\n  \"buyItNowPrice\": 57479580.9\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Check User3 lots",
					"item": [
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "three lots available for User 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Three lots available for User 3\", function() {",
											"    pm.expect(responseJSON.length).to.eql(3);",
											"    var ids = [responseJSON[0][\"id\"], responseJSON[1][\"id\"], responseJSON[2][\"id\"]];",
											"    expectedIds = [pm.collectionVariables.get(\"lotId1\"), pm.collectionVariables.get(\"lotId2\"), pm.collectionVariables.get(\"lotId3\")];",
											"    ids.sort();",
											"    expectedIds.sort();",
											"    pm.expect(ids).to.eql(expectedIds);    ",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation",
											"disabled": true
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "no lots created by User 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"bids\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"required\": [",
											"                        \"userId\",",
											"                        \"userLogin\",",
											"                        \"amount\",",
											"                        \"creationDate\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"userId\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"uuid\"",
											"                        },",
											"                        \"userLogin\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"amount\": {",
											"                            \"type\": \"number\",",
											"                            \"multipleOf\": 0.01,",
											"                            \"minimum\": 0.01",
											"                        },",
											"                        \"creationDate\": {",
											"                            \"type\": \"string\",",
											"                            \"format\": \"date-time\"",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"creationDate\",",
											"            \"bids\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"No lots created by User 3\", function() {",
											"    pm.expect(responseJSON).to.eql([]);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots/my",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots",
										"my"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"887fd791-1034-b167-5dd7-012c6171f375\",\n  \"description\": \"Duis sunt elit\",\n  \"endTime\": \"1979-10-19T06:02:35.772Z\",\n  \"startPrice\": 42598555.14,\n  \"status\": \"active\",\n  \"creationDate\": \"2016-02-21T12:26:47.262Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:e3b2bd6b-85c3-d862-0644-f1be7996d622\",\n    \"userLogin\": \"proident voluptate sed adipisicing\",\n    \"amount\": 96243935.04,\n    \"creationDate\": \"1949-12-29T01:39:20.892Z\"\n   },\n   {\n    \"userId\": \"urn:uuid:fb8c64e4-3ce6-ada8-f6ab-f18d1c7e980f\",\n    \"userLogin\": \"consequat deserunt ut enim\",\n    \"amount\": 86613365.78,\n    \"creationDate\": \"1965-10-29T21:37:12.707Z\"\n   }\n  ],\n  \"buyItNowPrice\": 37081279.07\n },\n {\n  \"id\": \"urn:uuid:f2ec8dab-55f2-b2f1-0b04-760a00a79ef1\",\n  \"description\": \"\",\n  \"endTime\": \"1955-11-05T01:31:35.462Z\",\n  \"startPrice\": 15152127.540000001,\n  \"status\": \"sent\",\n  \"creationDate\": \"1997-08-22T06:02:22.327Z\",\n  \"bids\": [\n   {\n    \"userId\": \"urn:uuid:9578dc5c-aadf-fb99-170b-6cbb79ccee6d\",\n    \"userLogin\": \"est amet ex\",\n    \"amount\": 14760048.370000001,\n    \"creationDate\": \"1949-05-04T19:49:52.260Z\"\n   },\n   {\n    \"userId\": \"4a40d427-b3b5-1cad-100d-8f4096bf15be\",\n    \"userLogin\": \"eu do magna dolor\",\n    \"amount\": 89270553.33,\n    \"creationDate\": \"1964-01-05T10:51:03.691Z\"\n   }\n  ],\n  \"buyItNowPrice\": 57479580.9\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots",
												"my"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "no lots with User 3 participation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Should not be any lots with User 3 participation\", function() {",
											"    pm.expect(responseJSON).to.eql([]);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?participation=1&createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation"
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Bids",
			"item": [
				{
					"name": "User 3 bids",
					"item": [
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "initial account status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "create min bid for lot1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 900;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount3\", parseFloat(pm.collectionVariables.get(\"accountAmount3\")) - bidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount3\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")) + bidAmount)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status after first bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "create bid for lot2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 1500;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount3\", parseFloat(pm.collectionVariables.get(\"accountAmount3\")) - bidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount3\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")) + bidAmount)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId2}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status after second bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "two lots with User 3 participation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            },",
											"            \"description\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"endTime\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"startPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"buyItNowPrice\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },            ",
											"            \"status\": {",
											"                \"type\": \"string\",",
											"                \"enum\": [",
											"                    \"active\",",
											"                    \"closed\",",
											"                    \"finished\",",
											"                    \"sent\",",
											"                    \"received\"",
											"                ]",
											"            },",
											"            \"ownerLogin\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"creationDate\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"date-time\"",
											"            },",
											"            \"lastBidAmount\": {",
											"                \"type\": \"number\",",
											"                \"multipleOf\": 0.01,",
											"                \"minimum\": 0.01",
											"            },",
											"            \"lastBidderId\": {",
											"                \"type\": \"string\",",
											"                \"format\": \"uuid\"",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"description\",",
											"            \"endTime\",",
											"            \"startPrice\",",
											"            \"status\",",
											"            \"ownerLogin\",",
											"            \"creationDate\"",
											"        ]",
											"    }",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"var responseJSON = JSON.parse(responseBody)",
											"pm.test(\"Should not be any new available lots fro User 1\", function() {",
											"    pm.expect(responseJSON.length).to.eql(2);",
											"    pm.expect(responseJSON[0][\"id\"]).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"    pm.expect(responseJSON[1][\"id\"]).to.eql(pm.collectionVariables.get(\"lotId2\"));",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lots?participation=1&createdAfter={{initialTime}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lots"
									],
									"query": [
										{
											"key": "search",
											"value": "Hand",
											"description": "search lots by description",
											"disabled": true
										},
										{
											"key": "participation",
											"value": "1",
											"description": "show only lots with the current user participation"
										},
										{
											"key": "win",
											"value": "1",
											"description": "show only lots won by the current user",
											"disabled": true
										},
										{
											"key": "createdAfter",
											"value": "{{initialTime}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"974b6d37-0318-6bd8-a766-12dc4a24f243\",\n  \"description\": \"nostrud ut\",\n  \"endTime\": \"1956-05-31T12:45:32.353Z\",\n  \"startPrice\": 96773488.21000001,\n  \"status\": \"active\",\n  \"ownerLogin\": \"quis irure ex aliquip\",\n  \"creationDate\": \"1964-12-27T02:38:46.851Z\",\n  \"buyItNowPrice\": 49541717.33,\n  \"lastBidAmount\": 26371028.97,\n  \"lastBidderId\": \"urn:uuid:43eee812-a0f3-8d31-03d1-e2e4df6f3eab\"\n },\n {\n  \"id\": \"urn:uuid:e1689d5b-e787-85c2-f5c5-1d65db4d463b\",\n  \"description\": \"ad cupidatat amet consectetur\",\n  \"endTime\": \"1972-07-28T07:35:11.106Z\",\n  \"startPrice\": 97255627.2,\n  \"status\": \"sent\",\n  \"ownerLogin\": \"enim dolore voluptate ipsum dolor\",\n  \"creationDate\": \"1976-09-10T14:42:18.454Z\",\n  \"buyItNowPrice\": 1760527.68,\n  \"lastBidAmount\": 66195086.050000004,\n  \"lastBidderId\": \"da34add6-04d3-098d-06d0-0149a63ef6dc\"\n }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lots?search=fugiat reprehenderit&participation=1&win=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lots"
											],
											"query": [
												{
													"key": "search",
													"value": "fugiat reprehenderit"
												},
												{
													"key": "participation",
													"value": "1"
												},
												{
													"key": "win",
													"value": "1"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Invalid bids",
					"item": [
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "try create bid for lot3 without enough funds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 2000;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId3}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "try create another bid for lot1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 1500;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "try create bid less than start price for lot3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 300;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId3}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status not changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to be sure bid payment cancelled",
											"setTimeout(function() {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "try create bid less than last bid for lot2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 1400;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId2}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status not changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount2\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to be sure bid payment cancelled",
											"setTimeout(function() {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User 2 bids for same lots",
					"item": [
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "create new bid for lot1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 1000;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount2\", parseFloat(pm.collectionVariables.get(\"accountAmount2\")) - bidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount2\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")) + bidAmount)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status after lot1 bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount2\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "create new bid for lot2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 1700;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount2\", parseFloat(pm.collectionVariables.get(\"accountAmount2\")) - bidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount2\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")) + bidAmount)",
											"",
											"    // restore User 3 balance",
											"    pm.collectionVariables.set(\"accountAmount3\", parseFloat(pm.collectionVariables.get(\"accountAmount3\")) + parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")))",
											"    pm.collectionVariables.set(\"accountBlockedAmount3\", 0)",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId2}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status after lot2 bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount2\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "account status after overbidded bids for User 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to process overbid events",
											"setTimeout(function() {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "get User 3 notifications (outbid bids)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(2)",
											"    var n1 = responseJSON[0]",
											"    pm.expect(n1.type).to.eql(\"bidOutbid\")",
											"    pm.expect(n1.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"    var n2 = responseJSON[1]",
											"    pm.expect(n2.type).to.eql(\"bidOutbid\")",
											"    pm.expect(n2.lotId).to.eql(pm.collectionVariables.get(\"lotId2\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User 3 bid with buyItNow price for lot1",
					"item": [
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "information about lot1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"endTime\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"startPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"buyItNowPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },            ",
											"        \"status\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"active\",",
											"                \"closed\",",
											"                \"finished\",",
											"                \"sent\",",
											"                \"received\"",
											"            ]",
											"        },",
											"        \"ownerLogin\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"lastBidAmount\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"lastBidderId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"endTime\",",
											"        \"startPrice\",",
											"        \"status\",",
											"        \"ownerLogin\",",
											"        \"creationDate\"",
											"    ]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"status\"]).to.eql(\"active\");",
											"    pm.expect(responseJSON[\"lastBidderId\"]).to.eql(pm.collectionVariables.get(\"userId2\"));",
											"    pm.collectionVariables.set(\"lastBidAmount\", responseJSON[\"lastBidAmount\"])",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:508ca2ee-37d6-4b7f-ff03-c1617154599c\",\n \"description\": \"enim consectetur\",\n \"endTime\": \"1970-08-09T15:56:22.364Z\",\n \"startPrice\": 78716611.84,\n \"status\": \"finished\",\n \"ownerLogin\": \"exercitation qui dolore labore\",\n \"creationDate\": \"1956-04-27T04:23:17.978Z\",\n \"buyItNowPrice\": 87359874.75,\n \"lastBidAmount\": 55055151.72,\n \"lastBidderId\": \"baad1e50-7566-bc80-46c8-236580e50879\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "create new bid with buyItNow price for lot1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bidAmount = 2100;",
											"",
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"bidAmount\", bidAmount)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount3\", parseFloat(pm.collectionVariables.get(\"accountAmount3\")) - bidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount3\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")) + bidAmount)",
											"",
											"    // restore User 2 balance",
											"    var lastBidAmount = parseFloat(pm.collectionVariables.get(\"lastBidAmount\"))",
											"    pm.collectionVariables.set(\"accountAmount2\", parseFloat(pm.collectionVariables.get(\"accountAmount2\")) + lastBidAmount)",
											"    pm.collectionVariables.set(\"accountBlockedAmount2\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")) - lastBidAmount)    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": {{bidAmount}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId/bid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId",
										"bid"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 43573173.36\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/bid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"bid"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "lot1 finished",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"endTime\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"startPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"buyItNowPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },            ",
											"        \"status\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"active\",",
											"                \"closed\",",
											"                \"finished\",",
											"                \"sent\",",
											"                \"received\"",
											"            ]",
											"        },",
											"        \"ownerLogin\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"lastBidAmount\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"lastBidderId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"endTime\",",
											"        \"startPrice\",",
											"        \"status\",",
											"        \"ownerLogin\",",
											"        \"creationDate\"",
											"    ]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"status\"]).to.eql(\"finished\");",
											"    pm.expect(responseJSON[\"lastBidderId\"]).to.eql(pm.collectionVariables.get(\"userId3\"));",
											"    pm.expect(responseJSON[\"lastBidAmount\"], pm.collectionVariables.get(\"bidAmount\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:508ca2ee-37d6-4b7f-ff03-c1617154599c\",\n \"description\": \"enim consectetur\",\n \"endTime\": \"1970-08-09T15:56:22.364Z\",\n \"startPrice\": 78716611.84,\n \"status\": \"finished\",\n \"ownerLogin\": \"exercitation qui dolore labore\",\n \"creationDate\": \"1956-04-27T04:23:17.978Z\",\n \"buyItNowPrice\": 87359874.75,\n \"lastBidAmount\": 55055151.72,\n \"lastBidderId\": \"baad1e50-7566-bc80-46c8-236580e50879\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "account status after winning lot1 for User 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to process finish lot events",
											"setTimeout(function() {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "get User 3 notifications (lotWon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(3)",
											"    var n3 = responseJSON[2]",
											"    pm.expect(n3.type).to.eql(\"lotWon\")",
											"    pm.expect(n3.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						},
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "account status for User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount2\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount2\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "get User 2 notifications (outbid bid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(1)",
											"    var n1 = responseJSON[0]",
											"    pm.expect(n1.type).to.eql(\"bidOutbid\")",
											"    pm.expect(n1.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						},
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User 1 notifications (lotFinished)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(1)",
											"    var n1 = responseJSON[0]",
											"    pm.expect(n1.type).to.eql(\"lotFinished\")",
											"    pm.expect(n1.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delivery",
			"item": [
				{
					"name": "Send Lot",
					"item": [
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "lot1 initial delivery information without tracking id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"status\",",
											"        \"sender\",",
											"        \"receiver\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"        },",
											"        \"status\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [",
											"            \"finished\",",
											"            \"sent\",",
											"            \"received\"",
											"        ]",
											"        },",
											"        \"sender\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"receiver\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\",",
											"                \"address\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"trackingId\": {",
											"        \"type\": \"string\"",
											"        }",
											"    }    ",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.status).to.eql(\"finished\")",
											"    pm.expect(responseJSON.sender.login).to.eql(pm.collectionVariables.get(\"login1\"))",
											"    pm.expect(responseJSON.receiver.login).to.eql(pm.collectionVariables.get(\"login3\"))",
											"    pm.expect(responseJSON.trackingId).to.be.undefined",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/:lotId/delivery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										":lotId",
										"delivery"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:e3dac6b4-9e12-0189-e335-ec8cc2e56d45\",\n \"sender\": {\n  \"login\": \"ad commodo in adipisicing in\",\n  \"firstName\": \"exercitation aliquip sed magna\",\n  \"lastName\": \"sint minim proident incididunt\"\n },\n \"receiver\": {\n  \"login\": \"non sint\",\n  \"firstName\": \"sit\",\n  \"lastName\": \"Lorem et magna in\",\n  \"address\": \"deserunt ut in\"\n },\n \"trackingId\": \"pariatur incididunt consequat\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "lot delivery information not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "sent lot1 to receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											"pm.collectionVariables.set(\"trackingId\", pm.variables.replaceIn('{{$randomBankAccountIban}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{lotId1}}\",\n    \"trackingId\": \"{{trackingId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/sent",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										"sent"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"350c5ca3-d24e-eb4d-7ab8-2740f2f95821\",\n    \"trackingId\": \"esse non dolore in enim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/sent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"sent"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"350c5ca3-d24e-eb4d-7ab8-2740f2f95821\",\n    \"trackingId\": \"esse non dolore in enim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/sent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"sent"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"350c5ca3-d24e-eb4d-7ab8-2740f2f95821\",\n    \"trackingId\": \"esse non dolore in enim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/sent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"sent"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"350c5ca3-d24e-eb4d-7ab8-2740f2f95821\",\n    \"trackingId\": \"esse non dolore in enim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/sent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"sent"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "lot1 sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"endTime\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"startPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"buyItNowPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },            ",
											"        \"status\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"active\",",
											"                \"closed\",",
											"                \"finished\",",
											"                \"sent\",",
											"                \"received\"",
											"            ]",
											"        },",
											"        \"ownerLogin\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"lastBidAmount\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"lastBidderId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"endTime\",",
											"        \"startPrice\",",
											"        \"status\",",
											"        \"ownerLogin\",",
											"        \"creationDate\"",
											"    ]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"status\"]).to.eql(\"sent\");",
											"    pm.expect(responseJSON[\"lastBidderId\"]).to.eql(pm.collectionVariables.get(\"userId3\"));",
											"    pm.collectionVariables.set(\"lastBidAmount\", responseJSON[\"lastBidAmount\"])",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 500 ms to process lot sent event",
											"setTimeout(function() {}, 500);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:508ca2ee-37d6-4b7f-ff03-c1617154599c\",\n \"description\": \"enim consectetur\",\n \"endTime\": \"1970-08-09T15:56:22.364Z\",\n \"startPrice\": 78716611.84,\n \"status\": \"finished\",\n \"ownerLogin\": \"exercitation qui dolore labore\",\n \"creationDate\": \"1956-04-27T04:23:17.978Z\",\n \"buyItNowPrice\": 87359874.75,\n \"lastBidAmount\": 55055151.72,\n \"lastBidderId\": \"baad1e50-7566-bc80-46c8-236580e50879\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User 3 notifications (lotSent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(4)",
											"    var n4 = responseJSON[3]",
											"    pm.expect(n4.type).to.eql(\"lotSent\")",
											"    pm.expect(n4.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Receive Lot",
					"item": [
						{
							"name": "login user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "try receive lot1 by User 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{lotId1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/received",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										"received"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "lot1 delivery information with tracking id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"status\",",
											"        \"sender\",",
											"        \"receiver\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"        },",
											"        \"status\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [",
											"            \"finished\",",
											"            \"sent\",",
											"            \"received\"",
											"        ]",
											"        },",
											"        \"sender\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"receiver\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\",",
											"                \"address\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"trackingId\": {",
											"        \"type\": \"string\"",
											"        }",
											"    }    ",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.status).to.eql(\"sent\")",
											"    pm.expect(responseJSON.sender.login).to.eql(pm.collectionVariables.get(\"login1\"))",
											"    pm.expect(responseJSON.receiver.login).to.eql(pm.collectionVariables.get(\"login3\"))",
											"    pm.expect(responseJSON.trackingId).to.eql(pm.collectionVariables.get(\"trackingId\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/:lotId/delivery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										":lotId",
										"delivery"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:e3dac6b4-9e12-0189-e335-ec8cc2e56d45\",\n \"sender\": {\n  \"login\": \"ad commodo in adipisicing in\",\n  \"firstName\": \"exercitation aliquip sed magna\",\n  \"lastName\": \"sint minim proident incididunt\"\n },\n \"receiver\": {\n  \"login\": \"non sint\",\n  \"firstName\": \"sit\",\n  \"lastName\": \"Lorem et magna in\",\n  \"address\": \"deserunt ut in\"\n },\n \"trackingId\": \"pariatur incididunt consequat\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "lot delivery information not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "receive lot1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"requestId\", pm.variables.replaceIn('{{$guid}}'))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var bidAmount = parseFloat(pm.collectionVariables.get(\"bidAmount\"))",
											"    pm.collectionVariables.set(\"accountBlockedAmount3\", parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")) - bidAmount)",
											"    // accountAmount3 not changed    ",
											"",
											"    // increase User 1 (lot owner) balance",
											"    pm.collectionVariables.set(\"accountAmount1\", parseFloat(pm.collectionVariables.get(\"accountAmount1\")) + bidAmount)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ",
										"key": "X-Request-ID",
										"value": "{{requestId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{lotId1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/received",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										"received"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "already processed response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) ",
												"key": "X-Request-ID",
												"value": "cbad1446-7603-d420-a39c-676174a1085f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"12a02e5e-7cd6-4f7d-9c44-2a900e012968\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/received",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												"received"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "received lot1 delivery information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [",
											"        \"id\",",
											"        \"status\",",
											"        \"sender\",",
											"        \"receiver\"",
											"    ],",
											"    \"properties\": {",
											"        \"id\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"        },",
											"        \"status\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [",
											"            \"finished\",",
											"            \"sent\",",
											"            \"received\"",
											"        ]",
											"        },",
											"        \"sender\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"receiver\": {",
											"            \"type\": \"object\",",
											"            \"required\": [",
											"                \"login\",",
											"                \"firstName\",",
											"                \"lastName\",",
											"                \"address\"",
											"            ],",
											"            \"properties\": {",
											"                \"login\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"firstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"lastName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"address\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            }",
											"        },",
											"        \"trackingId\": {",
											"        \"type\": \"string\"",
											"        }",
											"    }    ",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.status).to.eql(\"received\")",
											"    pm.expect(responseJSON.sender.login).to.eql(pm.collectionVariables.get(\"login1\"))",
											"    pm.expect(responseJSON.receiver.login).to.eql(pm.collectionVariables.get(\"login3\"))",
											"    pm.expect(responseJSON.trackingId).to.eql(pm.collectionVariables.get(\"trackingId\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delivery/api/v1/lot/:lotId/delivery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delivery",
										"api",
										"v1",
										"lot",
										":lotId",
										"delivery"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:e3dac6b4-9e12-0189-e335-ec8cc2e56d45\",\n \"sender\": {\n  \"login\": \"ad commodo in adipisicing in\",\n  \"firstName\": \"exercitation aliquip sed magna\",\n  \"lastName\": \"sint minim proident incididunt\"\n },\n \"receiver\": {\n  \"login\": \"non sint\",\n  \"firstName\": \"sit\",\n  \"lastName\": \"Lorem et magna in\",\n  \"address\": \"deserunt ut in\"\n },\n \"trackingId\": \"pariatur incididunt consequat\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "lot delivery information not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId/delivery",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId",
												"delivery"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "cbad1446-7603-d420-a39c-676174a1085f",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -18943155,\n \"message\": \"cillum dolore\"\n}"
								}
							]
						},
						{
							"name": "lot1 received",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        },",
											"        \"description\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"endTime\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"startPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"buyItNowPrice\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },            ",
											"        \"status\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"active\",",
											"                \"closed\",",
											"                \"finished\",",
											"                \"sent\",",
											"                \"received\"",
											"            ]",
											"        },",
											"        \"ownerLogin\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"        },",
											"        \"lastBidAmount\": {",
											"            \"type\": \"number\",",
											"            \"multipleOf\": 0.01,",
											"            \"minimum\": 0.01",
											"        },",
											"        \"lastBidderId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"endTime\",",
											"        \"startPrice\",",
											"        \"status\",",
											"        \"ownerLogin\",",
											"        \"creationDate\"",
											"    ]",
											"};",
											"",
											"pm.test('Response schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"status\"]).to.eql(\"received\");",
											"    pm.expect(responseJSON[\"lastBidderId\"]).to.eql(pm.collectionVariables.get(\"userId3\"));",
											"    pm.collectionVariables.set(\"lastBidAmount\", responseJSON[\"lastBidAmount\"])",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait 1000 ms to process lot received event",
											"setTimeout(function() {}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lot/api/v1/lot/:lotId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lot",
										"api",
										"v1",
										"lot",
										":lotId"
									],
									"variable": [
										{
											"key": "lotId",
											"value": "{{lotId1}}",
											"description": "(Required) ID of lot"
										}
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"urn:uuid:508ca2ee-37d6-4b7f-ff03-c1617154599c\",\n \"description\": \"enim consectetur\",\n \"endTime\": \"1970-08-09T15:56:22.364Z\",\n \"startPrice\": 78716611.84,\n \"status\": \"finished\",\n \"ownerLogin\": \"exercitation qui dolore labore\",\n \"creationDate\": \"1956-04-27T04:23:17.978Z\",\n \"buyItNowPrice\": 87359874.75,\n \"lastBidAmount\": 55055151.72,\n \"lastBidderId\": \"baad1e50-7566-bc80-46c8-236580e50879\"\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/lot/:lotId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"lot",
												":lotId"
											],
											"variable": [
												{
													"key": "lotId",
													"value": "urn:uuid:5358f1d4-27d4-9bc5-6a00-3e50887fab58",
													"description": "(Required) ID of lot"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -66574003,\n \"message\": \"ullamco id tempor velit\"\n}"
								}
							]
						},
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "get User 1 notifications (lotReceived)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"required\": [",
											"          \"type\",",
											"          \"message\",",
											"          \"creationDate\"",
											"        ],",
											"        \"properties\": {",
											"          \"type\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [",
											"                \"lotFinished\",",
											"                \"lotClosed\",",
											"                \"lotWon\",",
											"                \"lotSent\",",
											"                \"lotReceived\",",
											"                \"bidOutbid\"",
											"            ]",
											"          },",
											"          \"lotId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"message\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"creationDate\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"date-time\"",
											"          }",
											"        }",
											"    }",
											"};",
											"",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON.length).to.eql(2)",
											"    var n2 = responseJSON[1]",
											"    pm.expect(n2.type).to.eql(\"lotReceived\")",
											"    pm.expect(n2.lotId).to.eql(pm.collectionVariables.get(\"lotId1\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notification/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notification",
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type\": \"bidOutbid\",\n    \"message\": \"dolor aliqua laboris exercitation \",\n    \"creationDate\": \"1979-04-10T21:55:24.110Z\",\n    \"lotId\": \"6666ac88-0006-2def-0ba5-035167106995\"\n  },\n  {\n    \"type\": \"lotClosed\",\n    \"message\": \"proident ullamco nostrud cupi\",\n    \"creationDate\": \"1949-02-19T22:05:53.770Z\",\n    \"lotId\": \"d78fcadb-258c-c20f-e2f3-9e6e221b64ec\"\n  }\n]"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 12897039,\n  \"message\": \"nulla sit esse laborum\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Updated accounts balance",
					"item": [
						{
							"name": "login user 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login3}}\",\n    \"password\": \"{{password3}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "account status after receiving lot1 for User 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount3\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount3\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						},
						{
							"name": "login user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"{{login1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"api",
										"v1",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "bad request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -28763212,\n \"message\": \"ullamco consectetur sed\"\n}"
								}
							]
						},
						{
							"name": "account status after receiving lot1 for User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"amount\": {",
											"            \"type\": \"number\"",
											"        },",
											"        \"blockedAmount\": {",
											"            \"type\": \"number\"",
											"        }",
											"    },",
											"    \"required\": [\"amount\", \"blockedAmount\"]",
											"};",
											"",
											"pm.test('Response is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    var responseJSON = JSON.parse(responseBody)",
											"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount1\")));",
											"    pm.expect(responseJSON[\"blockedAmount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountBlockedAmount1\")));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/billing/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"billing",
										"api",
										"v1",
										"account"
									]
								}
							},
							"response": [
								{
									"name": "successfull response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"amount\": 91913293.5,\n \"blockedAmount\": 51311793.550000004\n}"
								},
								{
									"name": "forbidden response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"account"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 8549164,\n \"message\": \"nulla consequat nisi\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"logWithIndent = function(str, indent) {",
					"    fixedStr = ''",
					"    for (const ln of str.split(\"\\n\"))",
					"    {",
					"        if (fixedStr != '')",
					"        {",
					"            fixedStr += \"\\n\" + indent",
					"        }",
					"        fixedStr += ln",
					"    }",
					"    tests[fixedStr] = true",
					"}",
					"",
					"const curTime = new Date()",
					"logWithIndent(\"Request time: \" + curTime.toISOString())",
					"logWithIndent(\"Request params: \\n\" + (typeof request.data === 'string' ? request.data : ''), \"\\t\")",
					"logWithIndent(\"Response: \\n\" + responseBody, \"\\t\")"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "login1",
			"value": ""
		},
		{
			"key": "password1",
			"value": ""
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "firstName1",
			"value": ""
		},
		{
			"key": "lastName1",
			"value": ""
		},
		{
			"key": "email1",
			"value": ""
		},
		{
			"key": "address1",
			"value": ""
		},
		{
			"key": "login2",
			"value": ""
		},
		{
			"key": "password2",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "accountAmount1",
			"value": ""
		},
		{
			"key": "price",
			"value": ""
		},
		{
			"key": "retry",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		},
		{
			"key": "lotDescription",
			"value": ""
		},
		{
			"key": "lotEndTime",
			"value": ""
		},
		{
			"key": "lotStartPrice",
			"value": ""
		},
		{
			"key": "lotBuyItNowPrice",
			"value": ""
		},
		{
			"key": "lotId",
			"value": ""
		},
		{
			"key": "trackingId",
			"value": ""
		},
		{
			"key": "login3",
			"value": ""
		},
		{
			"key": "password3",
			"value": ""
		},
		{
			"key": "userId3",
			"value": ""
		},
		{
			"key": "accountAmount2",
			"value": ""
		},
		{
			"key": "accountAmount3",
			"value": ""
		},
		{
			"key": "firstName2",
			"value": ""
		},
		{
			"key": "lastName2",
			"value": ""
		},
		{
			"key": "email2",
			"value": ""
		},
		{
			"key": "address2",
			"value": ""
		},
		{
			"key": "firstName3",
			"value": ""
		},
		{
			"key": "lastName3",
			"value": ""
		},
		{
			"key": "email3",
			"value": ""
		},
		{
			"key": "address3",
			"value": ""
		},
		{
			"key": "initialTime",
			"value": ""
		},
		{
			"key": "lot1StartPrice",
			"value": ""
		},
		{
			"key": "lot1BuyItNowPrice",
			"value": ""
		},
		{
			"key": "lotId1",
			"value": ""
		},
		{
			"key": "lot2StartPrice",
			"value": ""
		},
		{
			"key": "lotId2",
			"value": ""
		},
		{
			"key": "lot3StartPrice",
			"value": ""
		},
		{
			"key": "lot3BuyItNowPrice",
			"value": ""
		},
		{
			"key": "lotId3",
			"value": ""
		},
		{
			"key": "accountBlockedAmount3",
			"value": ""
		},
		{
			"key": "accountBlockedAmount2",
			"value": ""
		},
		{
			"key": "accountBlockedAmount1",
			"value": ""
		},
		{
			"key": "bidAmount",
			"value": ""
		},
		{
			"key": "lastBidAmount",
			"value": ""
		}
	]
}